version: '3.8'

services:
  # Database section

  # SQL Server (orderdb)
  orderdb:
    container_name: orderdb
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: "Marethyu2004!"
      ACCEPT_EULA: "Y"
    restart: always
    volumes:
      - sqlserver_data:/var/opt/mssql
    ports:
      - "1435:1433"
    healthcheck:
      test: ["CMD-SHELL", "sqlcmd -S localhost -U sa -P Marethyu2004! -Q 'SELECT 1' || exit 1"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  # MySQL (productdb)
  productdb:
    container_name: productdb
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: "Marethyu2004!"
      MYSQL_DATABASE: "products"
    restart: always
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pMarethyu2004!"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  # PostgreSQL (customerdb)
  customerdb:
    container_name: customerdb
    image: postgres:alpine
    environment:
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "Marethyu2004!"
      POSTGRES_DB: CustomerDb
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  # Redis (basketdb)
  basketdb:
    container_name: basketdb
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"

  # MongoDB (inventorydb)
  inventorydb:
    container_name: inventorydb
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
  # Hangfire db
  hangfiredb:
    container_name: hangfiredb
    ports:
      - "27018:27017"
    volumes:
      - hangfire_mongo_data:/data/db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: 'admin'
      MONGO_INITDB_ROOT_PASSWORD: 'admin!'
  # Infrastructure section

  # RabbitMQ
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"

  # PgAdmin
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@example.com"
      PGADMIN_DEFAULT_PASSWORD: "Marethyu2004!"
    restart: always
    volumes:
      - pgadmin_data:/root/.pgadmin
    ports:
      - "5050:80"

  # Portainer
  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    restart: always
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "9000:9000"
      - "8080:8080"

  # Elasticsearch
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.2
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    restart: always
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"

  # Kibana
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.17.2
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    restart: always
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"

  # Microservice API section

  # Product API
  product-api:
    container_name: product-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings__DefaultConnection=server=productdb;port=3306;database=ProductDb;uid=root;pwd=Marethyu2004!"
    depends_on:
      productdb:
        condition: service_healthy
    ports:
      - "6002:80"
    restart: always

  # Customer API
  customer-api:
    container_name: customer-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings__DefaultConnection=server=customerdb;port=5432;database=CustomerDb;uid=admin;pwd=Marethyu2004!"
    depends_on:
      - customerdb
    ports:
      - "6003:80"
    restart: always

  # Basket API
  basket-api:
    container_name: basket-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "CacheSettings__ConnectionString=basketdb:6379"
      - "EventBusSettings__HostAddress=amqp://guest:guest@rabbitmq:5672"
      - "GrpcSettings__StockUrl=http://inventory_grpc"

    depends_on:
      - basketdb
      - rabbitmq
    ports:
      - "6004:80"
    restart: always

  # Order API
  order-api:
    container_name: order-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings__DefaultConnection=Server=orderdb,1433;Database=OrderDb;User Id=sa;Password=Marethyu2004!;MultipleActiveResultSets=true;Encrypt=True;TrustServerCertificate=True"
      - "EventBusSettings__HostAddress=amqp://guest:guest@rabbitmq:5672"

    depends_on:
      - orderdb
      - rabbitmq
    ports:
      - "6005:80"
    restart: always
  # Inventory API
  inventory-product-api:
    container_name: inventory-product-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "MongoDbSettings__ConnectionString=mongodb://inventorydb:27017"
      - "MongoDbSettings__Database=InventoryDb"

    depends_on:
      - inventorydb
    ports:
      - "6006:80"
    restart: always

  inventory-grpc:
     container_name: inventory-grpc
     environment:
       - ASPNETCORE_ENVIRONMENT=Development
       - ASPNETCORE_URLS=http://+:80
       - "MongoDbSettings__ConnectionString=mongodb://inventorydb:27017"
       - "MongoDbSettings__DatabaseName=InventoryDb"
     depends_on:
       - inventorydb
     ports:
       - "6007:80"
     restart: always
  apigw-ocelot:
     container_name: apigw-ocelot
     environment:
       - ASPNETCORE_ENVIRONMENT=Local
       - ASPNETCORE_URLS=http://+:80
       - "GlobalConfiguration__BaseUrl=http://apigw-ocelot"
     depends_on:
       - product-api
       - customer-api
       - basket-api
       - order-api
       - inventory-product-api
     ports:
       - "6001:80"
     restart: always
networks:
  default:
    name: microservices
    driver: bridge

volumes:
  sqlserver_data:
  mysql_data:
  postgres_data:
  portainer_data:
  elasticsearch_data:
  jaeger_data:
  mongo_data:
  pgadmin_data:
